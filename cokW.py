import os
import tkinter as tk
from tkinter import messagebox
from cryptography.fernet import Fernet
import deepl


# ğŸ”¹ GÃ©nÃ©rer et stocker la clÃ© de chiffrement
def generate_key():
    return Fernet.generate_key()


def store_encryption_key():
    if os.path.exists("secret.key"):
        print("ClÃ© de chiffrement dÃ©jÃ  existante, chargement en cours...")
    else:
        key = generate_key()
        with open("secret.key", "wb") as key_file:
            key_file.write(key)
        print("ClÃ© de chiffrement gÃ©nÃ©rÃ©e et stockÃ©e.")


# ğŸ”¹ Charger la clÃ© de chiffrement
def load_encryption_key():
    try:
        if os.path.exists("secret.key"):
            with open("secret.key", "rb") as key_file:
                key = key_file.read()
                print(f"ClÃ© chargÃ©e : {key}")  # Ajoute ce print pour voir la clÃ©
                if len(key) < 32:
                    raise ValueError("ClÃ© corrompue ou invalide.")
                return key
        else:
            messagebox.showerror("Erreur", "La clÃ© de chiffrement n'a pas Ã©tÃ© trouvÃ©e.")
            return None
    except Exception as e:
        messagebox.showerror("Erreur", f"Impossible de charger la clÃ© de chiffrement: {e}")
        return None


# ğŸ”¹ Chiffrer et dÃ©chiffrer la clÃ© API
def encrypt_api_key(api_key, encryption_key):
    f = Fernet(encryption_key)
    encrypted_key = f.encrypt(api_key.encode())
    print("ClÃ© API chiffrÃ©e avec succÃ¨s.")
    return encrypted_key


def decrypt_api_key(encrypted_key, encryption_key):
    f = Fernet(encryption_key)
    decrypted_key = f.decrypt(encrypted_key).decode()
    print("ClÃ© API dÃ©chiffrÃ©e avec succÃ¨s.")
    return decrypted_key


# ğŸ”¹ VÃ©rifier et rÃ©gÃ©nÃ©rer les fichiers clÃ©s si nÃ©cessaire
def check_and_regenerate_keys():
    secret_key_file = "secret.key"
    encrypted_api_file = "encrypted_api_key.enc"

    secret_exists = os.path.exists(secret_key_file)
    encrypted_exists = os.path.exists(encrypted_api_file)

    if not secret_exists or not encrypted_exists:
        print("Un fichier manque, rÃ©gÃ©nÃ©ration en cours...")

        # Supprimer les fichiers existants
        if secret_exists:
            os.remove(secret_key_file)
            print("Fichier secret.key supprimÃ©.")

        if encrypted_exists:
            os.remove(encrypted_api_file)
            print("Fichier encrypted_api_key.enc supprimÃ©.")

        # GÃ©nÃ©rer une nouvelle clÃ©
        key = Fernet.generate_key()
        with open(secret_key_file, "wb") as key_file:
            key_file.write(key)

        print("Nouvelle clÃ© de chiffrement gÃ©nÃ©rÃ©e et enregistrÃ©e.")


# ğŸ”¹ Tester la connexion DeepL
def test_connection():
    encryption_key = load_encryption_key()
    if encryption_key is None:
        return

    # Essayer de lire la clÃ© API chiffrÃ©e si elle existe
    if os.path.exists("encrypted_api_key.enc"):
        print("Lecture de la clÃ© API chiffrÃ©e...")
        with open("encrypted_api_key.enc", "rb") as enc_file:
            encrypted_key = enc_file.read()
        decrypted_key = decrypt_api_key(encrypted_key, encryption_key)
        entry_key.delete(0, tk.END)
        entry_key.insert(0, decrypted_key)
        print("ClÃ© API en clair :", decrypted_key)

    # RÃ©cupÃ©rer la clÃ© API entrÃ©e
    auth_key = entry_key.get()
    if not auth_key:
        messagebox.showwarning("Attention", "Veuillez entrer une clÃ© API.")
        return

    # Stocker la clÃ© API chiffrÃ©e
    encrypted_key = encrypt_api_key(auth_key, encryption_key)
    with open("encrypted_api_key.enc", "wb") as enc_file:
        enc_file.write(encrypted_key)
    print("ClÃ© API mise Ã  jour et enregistrÃ©e.")

    # DÃ©chiffrer la clÃ© API pour l'utiliser avec DeepL
    decrypted_key = decrypt_api_key(encrypted_key, encryption_key)

    try:
        print("Tentative de connexion Ã  DeepL...")
        translator = deepl.Translator(decrypted_key)
        result = translator.translate_text("Test", target_lang="FR")
        messagebox.showinfo("SuccÃ¨s", f"Connexion rÃ©ussie Ã  DeepL. RÃ©ponse: {result.text}")
        print("Connexion rÃ©ussie Ã  DeepL.")

    except Exception as e:
        messagebox.showerror("Ã‰chec", f"Erreur de connexion Ã  DeepL: {e}")
        print("Ã‰chec de la connexion Ã  DeepL :", e)

        # Suppression de la clÃ© API chiffrÃ©e en cas d'Ã©chec
        if os.path.exists("encrypted_api_key.enc"):
            os.remove("encrypted_api_key.enc")
            print("ClÃ© API chiffrÃ©e supprimÃ©e aprÃ¨s Ã©chec de connexion.")


# ğŸ”¹ RÃ©initialiser la clÃ© API
def reset_api_key():
    if os.path.exists("encrypted_api_key.enc"):
        os.remove("encrypted_api_key.enc")
        print("ClÃ© API chiffrÃ©e supprimÃ©e.")
        messagebox.showinfo("RÃ©initialisation", "La clÃ© API a Ã©tÃ© rÃ©initialisÃ©e.")
    entry_key.delete(0, tk.END)


# ğŸ”¹ Interface graphique Tkinter
root = tk.Tk()
root.title("Test de connexion DeepL")

tk.Label(root, text="ClÃ© API DeepL:").pack(pady=5)
entry_key = tk.Entry(root, width=50)
entry_key.pack(pady=5)

tk.Button(root, text="Tester la connexion", command=test_connection).pack(pady=10)
tk.Button(root, text="RÃ©initialiser la clÃ© API", command=reset_api_key, bg="red", fg="white").pack(pady=10)
"""
# VÃ©rifier et gÃ©nÃ©rer la clÃ© de chiffrement si nÃ©cessaire
if not os.path.exists("secret.key"):
    store_encryption_key()"""

# VÃ©rifier et rÃ©gÃ©nÃ©rer les fichiers clÃ©s si nÃ©cessaire
check_and_regenerate_keys()

# VÃ©rifier si la clÃ© API chiffrÃ©e existe et l'afficher
if os.path.exists("encrypted_api_key.enc"):
    encryption_key = load_encryption_key()
    if encryption_key is not None:
        with open("encrypted_api_key.enc", "rb") as enc_file:
            encrypted_key = enc_file.read()
        decrypted_key = decrypt_api_key(encrypted_key, encryption_key)
        entry_key.insert(0, decrypted_key)
        print("ClÃ© API chargÃ©e depuis le fichier et affichÃ©e.")

print("Lancement de l'interface graphique...")
root.mainloop()
